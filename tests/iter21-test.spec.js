const { test, expect } = require('@playwright/test');

test.describe('Iteraci√≥n 21 Test', () => {
  const clientUrl = 'http://127.0.0.1:3003';
  
  test('Iteraci√≥n 21: Enfoque simple y directo', async ({ page }) => {
    console.log('\n=== ITERACI√ìN 21: ENFOQUE SIMPLE Y DIRECTO ===');
    
    // Login
    await page.goto(clientUrl + '/login');
    await page.fill('input[name="username"]', 'test');
    await page.fill('input[name="password"]', 'test123');
    await page.click('button[type="submit"]');
    await page.waitForURL('**/sessions');
    await page.waitForTimeout(2000);
    
    // Create new session
    const createBtn = await page.locator('button:has-text("New Session")').first();
    await createBtn.click();
    
    const dialog = await page.locator('[role="dialog"]').isVisible();
    if (dialog) {
      await page.fill('input[type="text"]', 'Iteraci√≥n 21 - Simple y Directo');
      await page.click('button:has-text("Create")');
      await page.waitForURL('**/terminal/**');
      await page.waitForTimeout(2000);
      
      // Execute commands
      await page.keyboard.type('ls');
      await page.keyboard.press('Enter');
      await page.waitForTimeout(1000);
      
      // Split panel
      const splitButton = await page.locator('button:has-text("Split")');
      if (await splitButton.isVisible()) {
        await splitButton.click();
        await page.waitForTimeout(2000);
        
        await page.keyboard.type('pwd');
        await page.keyboard.press('Enter');
        await page.waitForTimeout(1000);
        
        // Take screenshot before refresh
        await page.screenshot({ 
          path: 'tests/screenshots/iter21-before-refresh.png', 
          fullPage: true 
        });
        
        console.log('\nüîÑ PROBANDO ENFOQUE SIMPLE Y DIRECTO...');
        
        // Refresh page
        await page.reload();
        await page.waitForTimeout(3000);
        
        // Take screenshot after refresh
        await page.screenshot({ 
          path: 'tests/screenshots/iter21-after-refresh.png', 
          fullPage: true 
        });
        
        // Final check
        const terminalsAfter = await page.locator('.xterm-rows').allTextContents();
        
        console.log('üìã VERIFICACI√ìN FINAL CON ENFOQUE SIMPLE:');
        let success = true;
        
        for (let i = 0; i < terminalsAfter.length; i++) {
          const content = terminalsAfter[i];
          
          console.log(`\nüñ•Ô∏è Terminal ${i + 1}:`);
          console.log(`üìè Longitud: ${content.length} caracteres`);
          
          // Verificaciones clave
          const problems = {
            videosPegado: content.includes('V√≠deosusuario@'),
            duplicacionConGuion: /(\w+@[\w-]+)-\1@[\w-]+:~\$/.test(content),
            duplicacionSinGuion: /(\w+@[\w-]+)\1@[\w-]+:~\$/.test(content)
          };
          
          let hasProblems = false;
          
          Object.entries(problems).forEach(([key, value]) => {
            if (value) {
              hasProblems = true;
              success = false;
              console.log(`‚ùå ${key}: PRESENTE`);
            }
          });
          
          if (!hasProblems) {
            console.log(`‚úÖ Terminal ${i + 1}: COMPLETAMENTE LIMPIO`);
            
            // Mostrar contenido limpio
            const prompts = content.match(/\w+@[\w-]+:~\$/g) || [];
            console.log(`   Prompts: ${prompts.length}`);
            
            if (i === 0) {
              const hasLs = content.includes('Descargas') && content.includes('Documentos');
              const hasVideos = content.includes('V√≠deos');
              console.log(`   Salida ls: ${hasLs ? '‚úì' : '‚úó'}`);
              console.log(`   'V√≠deos' separado: ${hasVideos && !problems.videosPegado ? '‚úì' : '‚úó'}`);
            }
          }
        }
        
        console.log('\nüìä RESULTADO ITERACI√ìN 21:');
        
        if (success) {
          console.log('‚úÖ ¬°√âXITO TOTAL CON ENFOQUE SIMPLE!');
          console.log('üéâ TODOS LOS PROBLEMAS RESUELTOS');
          console.log('‚úÖ Sin duplicaci√≥n con gui√≥n');
          console.log('‚úÖ Sin duplicaci√≥n sin gui√≥n');
          console.log('‚úÖ "V√≠deos" correctamente separado');
          console.log('\nüèÜ SOLUCI√ìN COMPLETADA EN ITERACI√ìN 21');
        } else {
          console.log('‚ùå A√öN HAY PROBLEMAS');
          console.log('üîß NECESITA: Iteraci√≥n 22');
        }
        
        return { 
          success: success, 
          iteration: 21,
          approach: 'simple-direct'
        };
        
      } else {
        console.log('‚ùå Bot√≥n Split no encontrado');
        return { success: false };
      }
    }
  });
});
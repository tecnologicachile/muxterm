const { test, expect } = require('@playwright/test');

test.describe('Iteraci√≥n 20 Test', () => {
  const clientUrl = 'http://127.0.0.1:3003';
  
  test('Iteraci√≥n 20: Soluci√≥n agresiva para V√≠deosusuario', async ({ page }) => {
    console.log('\n=== ITERACI√ìN 20: SOLUCI√ìN AGRESIVA PARA V√çDEOSUSUARIO ===');
    
    // Login
    await page.goto(clientUrl + '/login');
    await page.fill('input[name="username"]', 'test');
    await page.fill('input[name="password"]', 'test123');
    await page.click('button[type="submit"]');
    await page.waitForURL('**/sessions');
    await page.waitForTimeout(2000);
    
    // Create new session
    const createBtn = await page.locator('button:has-text("New Session")').first();
    await createBtn.click();
    
    const dialog = await page.locator('[role="dialog"]').isVisible();
    if (dialog) {
      await page.fill('input[type="text"]', 'Iteraci√≥n 20 - Soluci√≥n Agresiva');
      await page.click('button:has-text("Create")');
      await page.waitForURL('**/terminal/**');
      await page.waitForTimeout(2000);
      
      // Execute commands
      await page.keyboard.type('ls');
      await page.keyboard.press('Enter');
      await page.waitForTimeout(1000);
      
      // Split panel
      const splitButton = await page.locator('button:has-text("Split")');
      if (await splitButton.isVisible()) {
        await splitButton.click();
        await page.waitForTimeout(2000);
        
        await page.keyboard.type('pwd');
        await page.keyboard.press('Enter');
        await page.waitForTimeout(1000);
        
        // Take screenshot before refresh
        await page.screenshot({ 
          path: 'tests/screenshots/iter20-before-refresh.png', 
          fullPage: true 
        });
        
        console.log('\nüîÑ PROBANDO SOLUCI√ìN AGRESIVA...');
        
        // Refresh page
        await page.reload();
        await page.waitForTimeout(3000);
        
        // Take screenshot after refresh
        await page.screenshot({ 
          path: 'tests/screenshots/iter20-after-refresh.png', 
          fullPage: true 
        });
        
        // Final verification
        const terminalsAfter = await page.locator('.xterm-rows').allTextContents();
        
        console.log('üìã VERIFICACI√ìN FINAL - ITERACI√ìN 20:');
        let allClean = true;
        
        for (let i = 0; i < terminalsAfter.length; i++) {
          const content = terminalsAfter[i];
          
          console.log(`\nüñ•Ô∏è Terminal ${i + 1}:`);
          console.log(`üìè Longitud: ${content.length} caracteres`);
          
          // Verificaciones espec√≠ficas
          const checks = {
            videosPegado: content.includes('V√≠deosusuario@'),
            duplicacionGuion: /(\w+@[\w-]+)-\1@[\w-]+:~\$/.test(content),
            duplicacionMultiple: /(\w+)@([\w-]+).*\1@\2.*\1@\2/.test(content)
          };
          
          let terminalClean = true;
          
          if (checks.videosPegado) {
            console.log(`‚ùå 'V√≠deosusuario@' TODAV√çA PRESENTE`);
            terminalClean = false;
            allClean = false;
          }
          
          if (checks.duplicacionGuion) {
            console.log(`‚ùå Duplicaci√≥n con gui√≥n detectada`);
            terminalClean = false;
            allClean = false;
          }
          
          if (checks.duplicacionMultiple) {
            console.log(`‚ùå Duplicaci√≥n m√∫ltiple detectada`);
            terminalClean = false;
            allClean = false;
          }
          
          // Contar prompts y verificar normalidad
          const prompts = content.match(/\w+@[\w-]+:~\$/g) || [];
          console.log(`üìä Prompts: ${prompts.length}`);
          
          // Verificar contenido esperado
          if (i === 0) { // Terminal 1
            const hasLsOutput = content.includes('Descargas') && content.includes('Documentos');
            const hasVideos = content.includes('V√≠deos');
            
            console.log(`üìÅ Salida de ls presente: ${hasLsOutput ? 'S√ç' : 'NO'}`);
            console.log(`üìÅ 'V√≠deos' presente: ${hasVideos ? 'S√ç' : 'NO'}`);
            
            if (hasVideos && !checks.videosPegado) {
              console.log(`‚úÖ 'V√≠deos' correctamente separado`);
            }
            
            if (terminalClean && prompts.length === 2 && hasLsOutput) {
              console.log(`‚úÖ Terminal 1: COMPLETAMENTE LIMPIO`);
            }
          } else if (i === 1) { // Terminal 2
            if (terminalClean && prompts.length === 1) {
              console.log(`‚úÖ Terminal 2: COMPLETAMENTE LIMPIO`);
            }
          }
        }
        
        console.log('\nüìä RESULTADO FINAL ITERACI√ìN 20:');
        
        if (allClean) {
          console.log('‚úÖ ¬°√âXITO TOTAL!');
          console.log('üéâ PROBLEMA "V√≠deosusuario@" RESUELTO');
          console.log('üéâ TODAS LAS DUPLICACIONES ELIMINADAS');
          console.log('‚úÖ Terminal 1: Contenido y prompts correctos');
          console.log('‚úÖ Terminal 2: Sin duplicaci√≥n');
          console.log('\nüèÜ PROBLEMA COMPLETAMENTE SOLUCIONADO EN ITERACI√ìN 20');
        } else {
          console.log('‚ùå A√öN HAY PROBLEMAS');
          console.log('üîß NECESITA: Iteraci√≥n 21');
        }
        
        return { 
          success: allClean, 
          iteration: 20,
          totalTerminals: terminalsAfter.length,
          approach: 'aggressive-videos-separation'
        };
        
      } else {
        console.log('‚ùå Bot√≥n Split no encontrado');
        return { success: false };
      }
    }
  });
});